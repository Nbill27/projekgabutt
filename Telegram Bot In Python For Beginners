from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN: Final = 'YOUR_TOKEN'
BOT_USERNAME: Final = '@YOUR_BOT_USERNAME'

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Haii ada yang bisa aku bantu!')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Tolong ketik sesuatu, aku akan merespon.')

async def custom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('This is a custom command!')

def handle_response(text: str) -> str:
    processed = text.lower()

    if 'hai' in processed:
        return 'Haii,Gimana hari kamu'

    if 'cape banget' in processed:
        return 'Kamu lebih kuat dari yang kamu kira. Kamu telah melalui banyak hal, dan kamu bisa melalui ini juga, Jaga kesehatan fisik dan mental: Makan makanan sehat, olahraga teratur, dan tidur cukup Lakukan aktivitas yang kamu sukai: Ini bisa membantu mengurangi stres dan meningkatkan mood'

    if 'makasih' in processed:
        return 'kamu ga boleh nyerah sama keadaan ini okeee'


    return 'Maaf, tapi aku tidak mengerti'

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_type = update.message.chat.type
    text = update.message.text

    print(f'User {update.message.chat.id} in {message_type}: "{text}"')

    if message_type == 'group':
        if BOT_USERNAME in text:
            new_text = text.replace(BOT_USERNAME, '').strip()
            response = handle_response(new_text)
        else:
            return
    else:
        response = handle_response(text)

    print('Bot:', response)
    await update.message.reply_text(response)

async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} caused error {context.error}')

if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('custom', custom_command))

    app.add_handler(MessageHandler(filters.TEXT, handle_message))

    app.add_error_handler(error)

    print('Polling...')
    app.run_polling(poll_interval=3)
